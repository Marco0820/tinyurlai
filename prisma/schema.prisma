// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Url {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  shortCode   String    @unique
  originalUrl String
  title       String?
  description String?
  clicks      Int       @default(0)
  customAlias String?   @unique
  domain      String
  password    String?
  maxClicks   Int?
  expiresAt   DateTime?
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isActive    Boolean   @default(true)
  Click       Click[]
  ABTest      ABTest[]
}

model Click {
  id             String   @id @default(cuid())
  urlId          String
  url            Url      @relation(fields: [urlId], references: [id])
  timestamp      DateTime @default(now())
  ipAddress      String?
  userAgent      String?
  referrer       String?
  country        String?
  city           String?
  region         String?
  latitude       Float?
  longitude      Float?
  device         String?
  browser        String?
  browserVersion String?
  os             String?
  osVersion      String?
  isBot          Boolean  @default(false)

  // UTM parameters
  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmTerm     String?
  utmContent  String?
}

model ABTest {
  id              String  @id @default(cuid())
  urlId           String
  url             Url     @relation(fields: [urlId], references: [id])
  originalUrlA    String
  originalUrlB    String
  clicksA         Int     @default(0)
  clicksB         Int     @default(0)
  conversionRateA Float   @default(0)
  conversionRateB Float   @default(0)
  isActive        Boolean @default(true)
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  urls          Url[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
